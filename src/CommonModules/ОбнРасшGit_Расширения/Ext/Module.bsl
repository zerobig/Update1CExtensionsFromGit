Функция ОбновитьРасширение(Расширение, АдресСервера, АдресРесурса, ИмяПользователя, Пароль) Экспорт
	
	Попытка
		
		Соединение = СоединениеССервером(АдресСервера, 80);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Accept", "application/json");
		Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
			Заголовки.Вставить("Authorization", "Basic " + Base64Строка(ИмяПользователя + ":" + Пароль));
		КонецЕсли;
		
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		Результат = Соединение.Получить(Запрос);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		
		МассивРелизов = ОбнРасшGit_JSON.ЗаполнитьМассивИзОтветаJSON(ЧтениеJSON);
		МассивНомеровРелизов = Новый Массив;
		
		Для каждого Релиз Из МассивРелизов Цикл
			Если Релиз["assets"].Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для каждого Загрузка Из Релиз["assets"] Цикл
				Если СтрЗаканчиваетсяНа(Загрузка["browser_download_url"], ".cfe") Тогда
					МассивНомеровРелизов.Добавить(Новый Структура("НомерРелиза, Url",
						Релиз["tag_name"], Загрузка["browser_download_url"]));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Ошибка = Ложь;
		СообщениеОбОшибке = "";
		
		ВерсияРасширения = ОбнРасшGit_Версии.РазобратьИзСтроки(Расширение.Версия, Ошибка, СообщениеОбОшибке);
		Если Ошибка Тогда
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		СообщениеОбОшибке = "У данного репозитория отсутствуют версии релизов расширений!";
		Если МассивНомеровРелизов.Количество() = 0 Тогда
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		Ошибка = Истина;
		Сч = 0; НоваяВерсияСтрокой = ""; Url = "";
		Пока Ошибка И МассивНомеровРелизов.Количество() > Сч Цикл
			НоваяВерсияСтрокой = МассивНомеровРелизов[Сч]["НомерРелиза"];
			Url = МассивНомеровРелизов[Сч]["Url"];
			НоваяВерсия = ОбнРасшGit_Версии.РазобратьИзСтроки(НоваяВерсияСтрокой, Ошибка, СообщениеОбОшибке);
			Если Ошибка Тогда
				ЗаписьЖурналаРегистрации("Не удалось разобрать версию: " + МассивНомеровРелизов[Сч]["НомерРелиза"],
					УровеньЖурналаРегистрации.Примечание,,, СообщениеОбОшибке);
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЦикла;
		Если Ошибка Тогда
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		Если ОбнРасшGit_Версии.Сравнить(ВерсияРасширения, НоваяВерсия) = -1 Тогда
			
			// Обновляем
			ПараметрыПолучения = Новый Структура("ИмяФайлаОтвета", ПолучитьИмяВременногоФайла("cfe"));
			Результат = ЗагрузитьСодержимоеИзИнтернет(Url, ИмяПользователя, Пароль, ПараметрыПолучения);
			Если Не ПустаяСтрока(Результат.Содержимое) Тогда
				
				Файл = Новый Файл(Результат.Содержимое);
				Если Файл.Существует() Тогда
					
					ОбновитьДвоичныеДанныеРасширения(Расширение, Новый ДвоичныеДанные(Результат.Содержимое), НоваяВерсияСтрокой);
					
					УдалитьФайлы(Результат.Содержимое);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "В репозитории отсутствуют подходящие обновления для расширения.";
		КонецЕсли;
		
	Исключение
		СообщениеСОшибкой = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Исключение", УровеньЖурналаРегистрации.Ошибка,,, СообщениеСОшибкой);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьДвоичныеДанныеРасширения(Расширение, ДвоичныеДанные, ВерсияРелиза)
	
	ОписаниеРасширения = Новый ОписаниеКонфигурации(ДвоичныеДанные);
	
	Если ОписаниеРасширения.Имя <> Расширение.Имя Тогда
		ТекстОшибки = ОбнРасшGit_СтроковыеФункции.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя заменить расширение ""%1"" на ""%2"".'"),
			Расширение.Имя,
			ОписаниеРасширения.Имя);
	КонецЕсли;
	Если ОписаниеРасширения.Версия <> ВерсияРелиза Тогда
		ТекстОшибки = ОбнРасшGit_СтроковыеФункции.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Версия релиза на Git ""%1"" не соответствует версии загруженного с Git расширения ""%2"".'"),
			ВерсияРелиза,
			ОписаниеРасширения.Версия);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДанныеРасширения = Расширение.ПолучитьДанные();
		
		ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
		ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		Расширение.ЗащитаОтОпасныхДействий = ОписаниеЗащиты;
		Расширение.ИспользоватьОсновныеРолиДляВсехПользователей = Ложь;
		
		Ошибки = Расширение.ПроверитьВозможностьПрименения(ДвоичныеДанные, Ложь);
		Для Каждого Ошибка Из Ошибки Цикл
			Если Ошибка.Важность <> ВажностьПроблемыПримененияРасширенияКонфигурации.Критичная Тогда
				Продолжить;
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + Символы.ПС + Ошибка.Описание;
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ОбнРасшGit_СтроковыеФункции.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Новое расширение не может быть применено по причине:
			           |%1'"),
			ТекстОшибки);
	Иначе
		Расширение.Записать(ДвоичныеДанные);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВсеРасширения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Расширения.Ссылка КАК Ссылка,
	|	Расширения.АдресСервера КАК АдресСервера,
	|	Расширения.АдресРесурса КАК АдресРесурса,
	|	Расширения.ИмяПользователя КАК ИмяПользователя,
	|	Расширения.Пароль КАК Пароль
	|ИЗ
	|	Справочник.ОбнРасшGit_Расширения КАК Расширения
	|ГДЕ
	|	Расширения.Обновлять
	|	И НЕ Расширения.ПометкаУдаления
	|	И Расширения.АдресСервера <> """"
	|	И Расширения.АдресРесурса <> """"";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ОбновитьРасширение(ВыборкаЗапроса.Ссылка, ВыборкаЗапроса.АдресСервера, ВыборкаЗапроса.АдресРесурса,
			ВыборкаЗапроса.ИмяПользователя, ВыборкаЗапроса.Пароль);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоединениеССервером(АдресСервера, Таймаут)
	
	Перем ЗащищенноеСоединение;
	Адрес = "";
	Протокол = "";
	
	ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	// TODO:
	//Прокси = СформироватьПрокси(Протокол);
	//
	//Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, Таймаут, ЗащищенноеСоединение);
	Соединение = Новый HTTPСоединение(Адрес, , , , , Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол)
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол =  "https";
		Адрес = Сред(АдресСайта,9);
		
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбнРасшGit_ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбнРасшGit_ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL( , СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
КонецПроцедуры

#Если Не ВебКлиент Тогда

Функция НовыйЗащищенноеСоединение()

	Возврат Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);

КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка при подключении к серверу.'");

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru = 'На сервере возникла внутренняя ошибка при обработке запроса.'");

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru = 'Некорректный запрос.'");

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru = 'Внутренняя ошибка.'");

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка аутентификации на сервере.'");

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
			+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(ИнформацияОбОшибке, Перенаправления)

	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
		+ СтрСоединить(Перенаправления, ", " + Символы.ПС);

КонецПроцедуры

Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	Знач Логин = Неопределено,
	Знач Пароль = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные.
	// Метод: "GET", "POST" или "PUT".
	// ДанныеДляОбработки: данные, передаваемые методом POST.
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные.
	// Заголовки - заголовки запроса.
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , -1);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;
	
	Если ПараметрыПолучения.Таймаут = -1 Тогда
		// Таймаут по умолчанию.
		ПараметрыПолучения.Таймаут = 30;
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = НовыйЗащищенноеСоединение();
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		// TODO:
		//Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		//Если Прокси = Неопределено Тогда
		//	Если ПараметрыПолучения.НастройкиПрокси = Неопределено Тогда
		//		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураURI.Схема);
		//	Иначе
		//		Прокси = СформироватьИнтернетПрокси(ПараметрыПолучения.НастройкиПрокси, СтруктураURI.Схема);
		//	КонецЕсли;
		//	ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		//КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			// TODO:
			//Прокси,
			,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе

				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить содержимое (%1). %2'"),
					URL,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Перенаправления);
			Возврат Результат;
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru = 'Превышено количество перенаправлений.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru = 'Некорректное перенаправление.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Некорректное перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Циклическое перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru = 'Ошибка аутентификации на прокси-сервере.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный ответ сервера (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка (%1) при выполнении запроса к ресурсу.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код ошибки: %1.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецЕсли